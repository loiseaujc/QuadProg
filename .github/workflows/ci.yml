name: ci
on: [push]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest] #, windows-latest]
        compiler: [gfortran, ifx] #, flang-new] #, lfortran]
        include:
          - os: ubuntu-latest
            compiler: gfortran
            flag-debug: "-Wno-external-argument-mismatch -coverage"
            flag-release: "-Wno-external-argument-mismatch"
            extra-packages: "openblas, lcov"
          - os: ubuntu-latest
            compiler: ifx
            flag-debug: ""
            flag-release: ""
            extra-packages: "openblas"
          # - os: ubuntu-latest
          #   compiler: flang-new
          #   flag-debug: ""
          #   flag-release: ""
          #   extra-packages: "openblas"
 
          - os: macos-latest
            compiler: gfortran
            flag-debug: "-Wno-external-argument-mismatch"
            flag-release: "-Wno-external-argument-mismatch"
            extra-packages: "openblas, lcov"

        exclude:
          - os: macos-latest
            compiler: flang-new
          - os: macos-latest
            compiler: ifx
           
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Setup MSVC (only on Windows)
      #   if: runner.os == "Windows"
      #   uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          activate-environment: fortran
          channels: conda-forge, defaults

      - name: Setup Fortran
        uses: gha3mi/setup-fortran-conda@dev
        with:
          compiler: ${{ matrix.compiler }}
          platform: ${{ matrix.os }}
          extra-packages: ${{ matrix.extra-packages }}

      - name: fpm test (debug)
        run: |
          fpm build --compiler ${{ matrix.compiler }} --profile debug --flag "${{ matrix.flag-debug }}" --verbose --show-model
          fpm test --compiler ${{ matrix.compiler }} --profile debug --flag "${{ matrix.flag-debug }}" --verbose

      # - name: fpm test (release)
      #   run: |
      #     fpm test --compiler ${{ matrix.compiler }} --profile release --flag "${{ matrix.flag-release }}" --verbose

      - name: Run example
        run: |
          fpm run --compiler ${{ matrix.compiler }} --profile debug --example mpc --flag "${{ matrix.flag-debug }}" --verbose
          fpm run --compiler ${{ matrix.compiler }} --profile debug --example compact_mpc --flag "${{ matrix.flag-debug }}" --verbose
          fpm run --compiler ${{ matrix.compiler }} --profile debug --example markowitz --flag "${{ matrix.flag-debug }}" --verbose

      - name: Create coverage report
        if: contains( matrix.os, 'ubuntu') && contains( matrix.compiler, 'gfortran')
        run: |
          mkdir -p ${{ env.COV_DIR }}
          mv ./build/gfortran_*/*/* ${{ env.COV_DIR }}
          lcov --capture --initial --base-directory . --directory ${{ env.COV_DIR }} --output-file ${{ env.COV_DIR }}/coverage.base
          lcov --capture           --base-directory . --directory ${{ env.COV_DIR }} --output-file ${{ env.COV_DIR }}/coverage.capture
          lcov --add-tracefile ${{ env.COV_DIR }}/coverage.base --add-tracefile ${{ env.COV_DIR }}/coverage.capture --output-file ${{ env.COV_DIR }}/coverage.info
        env:
          COV_DIR: build/coverage

      - name: Upload coverage report
        if: contains( matrix.os, 'ubuntu') && contains( matrix.compiler, 'gfortran')
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/coverage/coverage.info
          verbose: true



# jobs:
#
#   Build:
#     runs-on: ${{ matrix.os }}
#     permissions:
#       contents: write
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-latest]
#         gcc_v: [14] # Version of GFortran we want to use.
#     env:
#       FC: gfortran-${{ matrix.gcc_v }}
#       GCC_V: ${{ matrix.gcc_v }}
#
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3
#
#     - name: Setup Fortran Package Manager
#       uses: fortran-lang/setup-fpm@v7
#       with:
#         github-token: ${{ secrets.GITHUB_TOKEN }}
#
#     - name: Install GFortran Linux
#       if: contains( matrix.os, 'ubuntu')
#       run: |
#         sudo apt-get install lcov
#         sudo add-apt-repository ppa:ubuntu-toolchain-r/test
#         sudo apt-get update
#         sudo apt-get install -y gcc-${{ matrix.gcc_v }} gfortran-${{ matrix.gcc_v }}
#         sudo update-alternatives \
#            --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.gcc_v }} 100 \
#            --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${{ matrix.gcc_v }} \
#            --slave /usr/bin/gcov gcov /usr/bin/gcov-${{ matrix.gcc_v }}
#         sudo apt-get install libopenblas-dev 
#
#     - name: Run tests
#       run: fpm test --profile debug --flag -coverage
#
#     - name: Run example
#       run: |
#           fpm run --example mpc --profile debug --flag -coverage
#           fpm run --example compact_cmp --profile debug --flag -coverage
#           fpm run --example monkewitz --profile debug --flag -coverage
#
#     - name: Create coverage report
#       run: |
#         mkdir -p ${{ env.COV_DIR }}
#         mv ./build/gfortran_*/*/* ${{ env.COV_DIR }}
#         lcov --capture --initial --base-directory . --directory ${{ env.COV_DIR }} --output-file ${{ env.COV_DIR }}/coverage.base
#         lcov --capture           --base-directory . --directory ${{ env.COV_DIR }} --output-file ${{ env.COV_DIR }}/coverage.capture
#         lcov --add-tracefile ${{ env.COV_DIR }}/coverage.base --add-tracefile ${{ env.COV_DIR }}/coverage.capture --output-file ${{ env.COV_DIR }}/coverage.info
#       env:
#         COV_DIR: build/coverage
#
#     - name: Upload coverage report
#       uses: codecov/codecov-action@v3
#       with:
#         files: build/coverage/coverage.info
