name: ci
on: [push]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        compiler: [gfortran, ifx]
        include:
          - os: ubuntu-latest
            compiler: gfortran
            compiler-version: 13.3.0
            flag-debug: "-Wno-external-argument-mismatch -coverage"
            extra-packages: "lcov, openblas"
          - os: ubuntu-latest
            compiler: ifx
            compiler-version: 2025.2.1
            extra-packages: "openblas"
           
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          activate-environment: fortran
          channels: conda-forge, defaults

      - name: Setup Fortran
        uses: gha3mi/setup-fortran-conda@dev
        with:
          compiler: ${{ matrix.compiler }}
          compiler-version: ${{ matrix.compiler-version }}
          platform: ${{ matrix.os }}
          extra-packages: ${{ matrix.extra-packages }}

      - name: fpm test (debug)
        run: |
          fpm build --compiler ${{ matrix.compiler }} --profile debug --flag "${{ matrix.flag-debug }}" --verbose --show-model
          fpm test --compiler ${{ matrix.compiler }} --profile debug --flag "${{ matrix.flag-debug }}" --verbose

      - name: Run example
        run: |
          fpm run --compiler ${{ matrix.compiler }} --profile debug --example mpc --flag "${{ matrix.flag-debug }}" --verbose
          fpm run --compiler ${{ matrix.compiler }} --profile debug --example compact_mpc --flag "${{ matrix.flag-debug }}" --verbose
          fpm run --compiler ${{ matrix.compiler }} --profile debug --example markowitz --flag "${{ matrix.flag-debug }}" --verbose

      - name: Create coverage report
        if: contains( matrix.os, 'ubuntu') && contains( matrix.compiler, 'gfortran')
        run: |
          mkdir -p ${{ env.COV_DIR }}
          mv ./build/gfortran_*/*/* ${{ env.COV_DIR }}
          lcov --capture --initial --base-directory . --directory ${{ env.COV_DIR }} --output-file ${{ env.COV_DIR }}/coverage.base
          lcov --capture           --base-directory . --directory ${{ env.COV_DIR }} --output-file ${{ env.COV_DIR }}/coverage.capture
          lcov --add-tracefile ${{ env.COV_DIR }}/coverage.base --add-tracefile ${{ env.COV_DIR }}/coverage.capture --output-file ${{ env.COV_DIR }}/coverage.info
        env:
          COV_DIR: build/coverage

      - name: Upload coverage report
        if: contains( matrix.os, 'ubuntu') && contains( matrix.compiler, 'gfortran')
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/coverage/coverage.info
          verbose: true
